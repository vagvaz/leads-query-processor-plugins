'''
Created on Jan 22, 2014

@author: nonlinear
'''
from org.leads.root.ecom.classifier.virtualclassifier import VirtualClassifier
from org.leads.root.ecom.extrschema.ops.xpathops import tree2textnodeslist

from  collections import namedtuple
import requests
import re
import io
from org.leads.root.ecom.dictionaries.pagelement import productname_divattr_regex,\
    productname_divattrval
from lxml import html

NameClassifCandTuple = namedtuple("NameClassifCandTuple","h1_child_coef div_child_coef title_words_coef node_path node_string")

class NameNodeClassifier(VirtualClassifier):
    '''
    classdocs
    '''


    def __init__(self):
        '''
        Constructor
        '''
        
        
    def find(self,params):
        ''' Should get a list of unique words contained in a part of the title that is non-repeating '''
        self.__title_words = params
        
        tree = self.page_dict.get("tree")
        # get a list of all nonempty strings from body (except scripts)
        if self.page_dict.get("text_nodes"):
            text_nodes = self.page_dict["text_nodes"]
            text_nodes_paths = self.page_dict["text_nodes_paths"]
        else:  
            text_nodes, text_nodes_paths = tree2textnodeslist(tree)
            self.page_dict["text_nodes"] = text_nodes
            self.page_dict["text_nodes_paths"] = text_nodes_paths
        
        candidates = []
        
        for i in range(0,len(text_nodes)):
            node = text_nodes[i]
            node_words = text_nodes[i].split()
            node_path = text_nodes_paths[i]
            if any(word in node_words for word in params):
                #print(node,node_path)
                # count the number of present words
                coef3 = self.__count_title_words_coef(node_words)
                # check if one of ancestors is <h1> node
                coef1 = self.__get_h1_ancestor_coef(node_path)
                # check if one of ancestors i s <div> node with  defined attribute values
                coef2 = self.__get_div_ancestor_attrs_coef(node_path)
                
                candidate_tuple = NameClassifCandTuple(coef1, coef2, coef3, node_path, node)
                candidates.append(candidate_tuple)
                
        if candidates:
            candidates = sorted(candidates,key=lambda x: -(x.h1_child_coef+x.div_child_coef+x.title_words_coef))
            print(candidates)
            self.nodepath = candidates[0].node_path
            return True
        else:
            self.nodepath = None
            return False
    
    
    def __count_title_words_coef(self,text):
        title_words = self.__title_words
        counter = 0
        for word in title_words:
            if word in text:  
                counter += 1
        return 10*counter/len(title_words)    
    
    
    def __get_h1_ancestor_coef(self,node):
        last = len(node)
        elem = 'h1'
        found = 0
        while True:
            index = node.rfind(elem,0,last)
            if index > -1:
                #print(node,"found h1")
                found = 1
            break            
        return 10*found
    
    
    def __get_div_ancestor_attrs_coef(self, node):
        element = self.tree.xpath(node)[0]
        divelems = element.xpath("ancestor-or-self::div")
        bestfound = 0
        if divelems:
            divelems.reverse()
            for divelem in divelems:   
                #print(divelem)
                for attr in divelem.items():
                    curr = 0
                    if attr[0] and re.match(productname_divattr_regex,attr[0]):
                        for words in productname_divattrval:
                            if any(word in attr[1].lower() for word in words):
                                curr += 1
                        #if curr > 0: print(attr[0],"=",attr[1])
                        bestfound = max(bestfound,curr)
                if bestfound == len(productname_divattrval):
                        break
        return 5*bestfound
   
   

# test_urls = ['http://www.amazon.com/gp/product/B00CSHZK76/',
#              'http://www.dickssportinggoods.com/product/index.jsp?productId=19283636',
#              'http://www.zappos.com/adidas-running-marathon-10-ng~2',
#              'http://www.zalando.co.uk/nike-performance-flex-2013-run-lightweight-running-shoes-black-n1241a08r-q13.html',
#              'http://www.kickz.com/uk/nike/shoes/sneakers-high/blazer-hi-suede-vintage-royalblue_white',
#              'http://www.footlocker.com/product/model:157341/sku:60883011/',
#              'http://store.nike.com/us/en_us/pd/graphic-2-usoc-t-shirt/pid-859585/',
#              'http://www.adidas.com/us/product/mens-basketball-rose-4-shoes/HH460',
#              'http://www.next.co.uk/x535656s6']
# for url in test_urls:
#     content = requests.get(url).text
#     f = io.StringIO(content)
#     tree = html.parse(f)
#     title = tree.xpath('/html/head/title/text()')[0]
#     title = re.sub('[\-\|]+', '', title)
#     title=list(set(title.split()))
#     title = list(set(title))
#     classif = NameNodeClassifier() 
#     print(url,classif.classify(content,title),title)
#     #print(classif.getNodePath())
#     print('---')
    
    
    
    
    
    
    
    
         