'''
Created on Feb 20, 2014

@author: nonlinear
'''
from org.leads.root.ecom.extrschema.ops import xpathops
from org.leads.root.ecom.dictionaries.currency import curr_regex, price_regex,\
    currprice_regex, pricecurr_regex, price_any_regex
import re
from org.leads.root.ecom import properties
from org.leads.root.myprint import prettyprint
from org.leads.root.ecom.extrschema import pricefinder_deprecated


class PriceNode(object):
    __slots__= "nodestring", "nodepath", "desc",

    def items(self):
        "dict style items"
        return [
            (field_name, getattr(self, field_name))
            for field_name in self.__slots__]

    def __iter__(self):
        "iterate over fields tuple/list style"
        for field_name in self.__slots__:
            yield getattr(self, field_name)

    def __getitem__(self, index):
        "tuple/list style getitem"
        return getattr(self, self.__slots__[index])


class PriceCandidate(object):
    __slots__= "pricenodelist", "buttondist", "namedist", "bagdist", "points",

    def items(self):
        "dict style items"
        return [
            (field_name, getattr(self, field_name))
            for field_name in self.__slots__]

    def __iter__(self):
        "iterate over fields tuple/list style"
        for field_name in self.__slots__:
            yield getattr(self, field_name)

    def __getitem__(self, index):
        "tuple/list style getitem"
        return getattr(self, self.__slots__[index])
    
    def getpriceval(self):
        '''
        Returns a value of the price represented by that price candidate
        '''
        pricevalstr = ''
        for node in self.pricenodelist:
            if 'v' in node.desc:
                pricevalstr = node.nodestring
                break
        matched_price = re.search(price_any_regex,pricevalstr)
        if matched_price:
            new_price = matched_price.group(0)#str(matched_price)
            new_price = new_price.replace(',','.')
            new_price = new_price.replace('-','')
            print(new_price)
            price_val = float(new_price)
            if price_val > 0.0:
                return price_val
            else:
                return float("inf")


class PriceFinder(object):
    '''
    Implemented according to Leads/implementations/Find_price_20140219_193...
    '''


    def __init__(self, contents_list, namenode, buttonnode=None, basketnode=None):
        '''
        contents_list - content of 10 pages of the site offering product
        '''
        self.__contents_list = contents_list
        self.__trees_list = trees_list = [xpathops.code2tree(content) for content in contents_list]
        
        self.__namenode = namenode
        self.__buttonnode = buttonnode
        self.__basketnode = basketnode
                
        self.__prim_text_nodes, self.__prim_text_nodes_paths = xpathops.tree2textnodeslist(trees_list[0])
        
        self.__text_nodes_list = []
        self.__text_nodes_paths_list = []
        for tree in trees_list:
            text_nodes, text_nodes_paths = xpathops.tree2textnodeslist(tree)
            self.__text_nodes_list.append(text_nodes)
            self.__text_nodes_paths_list.append(text_nodes_paths)
        
       
    def __is_price_node(self,node_string,howtocontinue):
        '''
        returns is_price_node, howtocontinue, 
        '''
        node_string = node_string.strip()
        
        if howtocontinue:
            if howtocontinue == 'find_curr' and re.match(curr_regex, node_string):
                return True, None
            elif howtocontinue == 'find_price' and re.match(price_regex, node_string):
                return True, None
            else:
                return False, None
        else:
            if re.match(price_regex,node_string):
                return False, 'find_curr'
            elif re.match(curr_regex, node_string):
                return False, 'find_price'
            elif re.match(currprice_regex, node_string) or re.match(pricecurr_regex, node_string):
                return True, None
            else:
                return False, None
    
    
    def __is_regular_text_node(self,node_path,node_string):
        if not node_string:
            return False
        if "/li" in node_path:
            return False
        if "/select" in node_path:
            return False
        else:
            return True
    
    
    def __evaluate_text_nodes(self,text_nodes,text_nodes_paths):
        '''
        evaluate which nodes are price nodes
        '''
        
        is_price_list =     [False] * len(text_nodes)
        price_ex_list =     [None]  * len(text_nodes)
        is_skip_node_list = [False] * len(text_nodes)
        
        isprice_temp = False
        howtocontinue = None
        
        for i,(text,path) in enumerate(zip(text_nodes,text_nodes_paths)):       
            # 1. 
            howtocontinue_old = howtocontinue
            isprice_temp,howtocontinue = self.__is_price_node(text, howtocontinue)
            if isprice_temp == True:
                if howtocontinue_old == 'find_curr':
                    is_price_list[i] = True
                    price_ex_list[i] = "c" # currency
                    is_price_list[i-1] = True
                    price_ex_list[i-1] = "v" # value  
                elif howtocontinue_old == 'find_curr':
                    is_price_list[i] = True
                    price_ex_list[i] = "c" # currency
                    is_price_list[i-1] = True
                    price_ex_list[i-1] = "v" # value  
                else:
                    is_price_list[i] = True
                    price_ex_list[i]= "cv" # currency, value
            else:
                is_price_list[i] = False
                price_ex_list[i] = None
                
            # 2.
            is_skip_node_list[i] = not self.__is_regular_text_node(path, text)
            
        return is_price_list,price_ex_list,is_skip_node_list
    
    
    def __getdist(self,nodepos,spnodepos,is_skip_node_list,isdouble=True):
        before = True if nodepos < spnodepos else False
        index1 = nodepos if before else spnodepos
        index2 = spnodepos if before else nodepos
        
        dist = is_skip_node_list[index1:index2].count(False)
        
        if isdouble and before:
            dist -= 1
            
        return dist
            
    
    def __listcandidates(self,is_price_list,price_ex_list,is_skip_node_list,
                                                namenodepos,buttonnodepos,basketnodepos):
        text_nodes = self.__prim_text_nodes
        text_nodes_paths = self.__prim_text_nodes_paths
        
        price_candidate_list = []
        
        iwasanalyzed = False
        
        for i,(text,path,isprice,priceex,isskip) in enumerate(zip(text_nodes,text_nodes_paths,is_price_list,price_ex_list,is_skip_node_list)):
            if iwasanalyzed == True:
                analyzed = False
                continue
           
            pricenodelist = []
            namedist = buttondist = bagdist = 0
           
            if isprice == True:
                if 'c' in priceex and 'v' in priceex:
                    namedist = self.__getdist(i,namenodepos,is_skip_node_list) if namenodepos else None
                    buttondist = self.__getdist(i,buttonnodepos,is_skip_node_list) if buttonnodepos else None
                    bagdist = self.__getdist(i,basketnodepos,is_skip_node_list) if basketnodepos else None
                    pricenodelist = [PriceNode()]
                    pricenodelist[0].nodestring = text
                    pricenodelist[0].nodepath = path
                    pricenodelist[0].desc = priceex
                else:
                    namedist = self.__getdist(i,namenodepos,is_skip_node_list,isdouble=True) if namenodepos else None
                    buttondist = self.__getdist(i,buttonnodepos,is_skip_node_list,isdouble=True) if buttonnodepos else None
                    bagdist = self.__getdist(i,basketnodepos,is_skip_node_list,isdouble=True) if basketnodepos else None
                    pricenodelist = [PriceNode(),PriceNode()]
                    pricenodelist[0].nodestring = text
                    pricenodelist[0].nodepath = path
                    pricenodelist[0].desc = priceex
                    pricenodelist[1].nodestring = text_nodes[i+1]
                    pricenodelist[1].nodepath = text_nodes_paths[i+1]
                    pricenodelist[1].desc = price_ex_list[i+1]
                    iwasanalyzed = True
                
                price_candidate = PriceCandidate()
                price_candidate.pricenodelist   = pricenodelist
                price_candidate.buttondist      = buttondist
                price_candidate.namedist        = namedist
                price_candidate.bagdist         = bagdist
                
                price_candidate_list.append(price_candidate)
                
        return price_candidate_list
       
                
    def __getpricestringpath(self,cand):
        
        for node in cand.pricenodelist:
            if 'v' in node.desc:
                return node.nodestring, node.nodepath
       
            
    def __getpricepath(self,cand):
        
        for node in cand.pricenodelist:
            if 'v' in node.desc:
                return node.nodepath
                
            
#     def __filtercandidates_old(self,pricecandidates):
#         '''
#         Checks price node paths against other pages
#         '''
#         other_trees_list = self.__trees_list[1:]
#         pages_no = len(self.__trees_list)
#         
#         
#         newpricecandidates = []
#         
#         for cand in pricecandidates:
#             stringsset = set()
#             string, path = self.__getpricestringpath(cand)
#             
#             stringsset.add(string.strip())
#             
#             for page_tree in other_trees_list:
#                 # see how many various values are in this field of pages
#                 stringsonpage = page_tree.xpath(path+"/text()")
#                 if stringsonpage and stringsonpage[0] != None:
#                     stringsset.add(stringsonpage[0].strip())
#             
#             if len(stringsset)>properties.DIFFERENT_PRICE_VALS_FACTOR*pages_no:
#                 newpricecandidates.append(cand)
#                 
#         return newpricecandidates
    
    
    def __filtercandidates(self,pricecandidates_set):
        '''
        Checks price node paths against every of the sample pages
        '''
        
        trees_list = self.__trees_list[:]
        newpricecandidates = []
        
        for cand in pricecandidates_set:
            
            pageswithnodeno = 0
            stringsset = set()
            pricepath = self.__getpricepath(cand)
            for page_tree in trees_list:
                
                # see how many various values are in this field of pages
                stringsonpage = page_tree.xpath(pricepath+"/text()")
                if stringsonpage and stringsonpage[0] != None:
                    stringsset.add(stringsonpage[0].strip())
                    pageswithnodeno += 1
                    
            # here basically assuming that nodes with some constant price would often be candidates
            if pageswithnodeno <= 3:
                newpricecandidates.append(cand)
            else:
                if 2*len(stringsset) > pageswithnodeno:
                    newpricecandidates.append(cand)
                    
        return newpricecandidates            
                    
            
    
    
    def __evalcandidatesbyposition(self,pricecandidates):
        for cand in pricecandidates:
            cand.points = 0
            
            # points for the distance from the name node
            if cand.namedist:
                if cand.namedist in range (-1,-10):
                    cand.points += 10+cand.namedist
                elif cand.namedist in range (0,20):
                    cand.points += 20-cand.namedist
            
            # points for the distance from the button node
            if cand.buttondist:
                if cand.buttondist in range (0,-20):
                    cand.points += 20+cand.buttondist
                elif cand.buttondist in range (1,10):
                    cand.points += 10-cand.buttondist
                
            # points for the distance from the basket node
            if cand.bagdist:
                if cand.bagdist < 0:
                    cand.points -= 10
                elif cand.bagdist in range (0,5):
                    cand.points -= 5-cand.bagdist
                
        if len(pricecandidates)>1:
            pricecandidates = sorted(pricecandidates,key=lambda cand: -cand.points)
        
            # might be that an old price is taken
            # take a look if two first candidates are close to each other
            if abs(pricecandidates[0].bagdist - pricecandidates[1].bagdist)<=3:
                # if that is the case, check which one has the lower price value
                if pricecandidates[1].getpriceval() < pricecandidates[0].getpriceval():
                    pricecandidates[0],pricecandidates[1] = pricecandidates[1],pricecandidates[0]    
            
        return pricecandidates
            
        
    def find_price(self):
        prim_tree = self.__trees_list[0]
        prim_paths = self.__prim_text_nodes_paths
        
        trees_list = self.__trees_list
        text_nodes_list = self.__text_nodes_list
        text_nodes_paths_list = self.__text_nodes_paths_list
        
        pricecandidates_perpage_list = []
        pricecandidates_set = set()
        pricecandidates_list = []
        
        i=0
        # For every page, make a list of candidates
        for tree, text_nodes, text_nodes_paths in zip(trees_list, text_nodes_list, text_nodes_paths_list):
            
            # 1. Prepare lists describing nodes
            is_price_list,price_ex_list,is_skip_node_list = self.__evaluate_text_nodes(text_nodes, text_nodes_paths)
            
            # 2. Find position of closest text nodes of nodes of the graph
            namenodepos   = xpathops.getposintextnodeslist(tree, text_nodes_paths, self.__namenode) if self.__namenode else None
            buttonnodepos = xpathops.getposintextnodeslist(tree, text_nodes_paths, self.__buttonnode) if self.__buttonnode else None
            basketnodepos = xpathops.getposintextnodeslist(tree, text_nodes_paths, self.__basketnode) if self.__basketnode else None
            
            print(i,":",namenodepos,buttonnodepos,basketnodepos)
            i+=1
            
            # 3. Count distances, create new list of objects
            pricecandidates_set = self.__listcandidates(is_price_list,price_ex_list,is_skip_node_list,
                                                    namenodepos,buttonnodepos,basketnodepos)
            printme(pricecandidates_set)
            print "\n"
            
            pricecandidates_perpage_list
            
        prettyprint.print_space()
        
        for cands in pricecandidates_perpage_list:
            pricecandidates_set.extend(cands)
        
        if pricecandidates_set:
            # 4. Check nodepaths against other pages
            ''' TAKE A LOOK HERE! '''
            pricecandidates_list = self.__filtercandidates(pricecandidates_set) 
            printme(pricecandidates_set)
            prettyprint.print_space()
            
            if pricecandidates_list:
                # 5. Sort candidates by the position
                pricecandidates_list = self.__evalcandidatesbyposition(pricecandidates_set)
                printme(pricecandidates_set)
                prettyprint.print_space()
                
#         if pricecandidates_list[0].points > 0:
#             return pricecandidates_list[0].pricenodelist
#         else:
#             return None

            pricenodes_list = []
            i = 0
            for cand in pricecandidates_list:
                if cand.points > 0:
                    pricenodes_list.append(cand.pricenodelist)
                else:
                    break
                
            return pricenodes_list
        
        
        
def printme(pricecandidates):
    if pricecandidates:        
        for cand in pricecandidates:
            print(cand.pricenodelist[0].nodestring,cand.pricenodelist[0].nodepath,cand.pricenodelist[0].desc)  
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        